---
description: 
globs: golang-auth/**
alwaysApply: false
---
## Authleteを用いてOIDCや認証についてPoCを行うプロジェクトのガイドライン

### 一般的な責務
- Goらしいコード を書き、保守性・高性能性を備えた実装を推進する
- モジュール性と関心の分離を保った設計をClean Architectureに従って実現する
- テスト駆動開発（TDD）、高い可観測性（observability）、スケーラブルな設計パターンを奨励する

### アーキテクチャパターン
- ドメイン駆動設計（DDD） の原則を可能な限り適用する
- インタフェース駆動開発 を重視し、明示的な依存性注入を行う
- 継承よりも合成 を優先し、小さく目的に特化したインタフェースを設計する
- 公開関数（public function）は常に インタフェース に依存し、具象型には依存しない（柔軟性とテスタビリティ向上のため）

### 開発プラクティス
- 短く焦点の絞られた関数 を書く（1つの責務に集中）
- エラーは常に明示的に処理 し、fmt.Errorf("文脈: %w", err) のようにラップしてトレース性を確保
- グローバル変数の使用を避け、依存は必ずコンストラクタで注入
- Goの context パターン を活用して、リクエストスコープの値、タイムアウト、キャンセルを伝搬
- goroutine の使用時は チャネルまたは sync パッケージで状態を安全に管理
- リソースは defer で確実にクローズ し、リークを防ぐ

### セキュリティ
- 外部からの入力に対しては バリデーションとサニタイズ を厳格に行う
- JWTやクッキー、構成値などは 安全なデフォルト値 を設定
- 機密処理には 明確なパーミッション境界 を設ける
- 外部呼び出しには リトライ・指数バックオフ・タイムアウト を必ず設定
- サービス保護のために サーキットブレーカーとレート制限 を導入
- Redisなどを用いた分散レートリミット も検討（全体最適を意識）

